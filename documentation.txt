Gadget Collection:
To collect gadgets, the following process was used:

1) Sections of the ELF containing executable code was extracted.
This was done by iterating through the section headers, and extracting the data for each section that had the executable flag marked.
The code to accomplish this is in elf.py, in the Elf class, in the function getTextSegments.


2) The executable code was disassembled.
This was achieved via Capstone's python bindings. The code was disassembled from the beginning of the section.
When the end of the disassembled code is reached, it is checked as to whether this reaches the end of the elf section.
If not, the offset to disassemble from is incremented (to skip a byte) and the process is repeated until the end of the section is reached.
Thus we exhaustively disassemble all possible locations for blocks of code within the segment, and the result we get is a list of a list of instructions.
The code to accomplish this is in elf.py, in the TextSegment class, in getCodeBlocks. The function is invoked in the instrumentation in main.py.


3) Gadget terminators were located.
Specific instruction mnemonics that were allowed to terminate gadgets were defined (gadgetTerminators in gadgets.py).
Each disassembled block of code were traversed linearly, and the index of all terminators was located.
Each disassembled block used a list of indices to keep track of the terminators.
The code that does this is in gadget.py, in findGadgetTerminators, called by extractAllGadgets, a function to be called on a singular code block.
The application to multiple code blocks was done by main.py.


4) The instructions were traversed backwards until a non-"useful" instruction was encountered.
A list of potentially "useful" (permissible) mnemonics of instructions to have in a gadget was kept in usefulOperations, in gadget.py.
The list of disassembled was traversed backwards so long as only permissible instructions were encountered.
Once an instruction not on the list was encountered, the traversal was halted, and the bytes comprising all instructions (including the non-permissible one) were extracted.
The code to perform this step is in gadget.py, in extractGadgets (the first half).


5) All substrings of the code found this way were evaluated as potential gadgets.
For example for what is meant by a substring / subgadget:
pop r15 ; ret is 0x41 0x5f 0xc3
pop rdi ; ret is 0x5f 0xc3, whose bytes are a subsequence of the first sequence.
Thus, on the bytes level, each gadget may contain sub-gadgets.
To detect sub-gadgets, the bytes extracted from the previous stage were traversed backwards, as disassembled from each location.
If the disassembly has the form of a valid gadget, it is added to the list of gadgets.
The code to perform this sub-gadget detected was in gadget.py, in extractGadgets (the second half).



Payload Generation:
The payload was created with the constant goal of calling execve with sh as the parameter. To accomplish this, a few helper functions were created. The list of gadgets is stored as a module variable gadgetList. It is set in the execveROPChain function.

Helper functions:
Search gadgets:
getPopGadgets(reg) - get a list of gadgets in the provided list whose first action is to pop into the given register.

getZeroingGadgets(reg) - get a list of gadgets that set the given register's value to 0. This can be either through xoring it with itself or moving 0 into it.

getIncrementingGadgets(reg) - get a list of gadgets that increment the given register's value. This can be either inc or add _, 1.

getMovQwordGadgets() - get a list of gadgets in the provided list that write to arbitary memory from a register.

getSyscallGadgets() - get all gadgets that consist of a single syscall command.


Note that for every gadget we have all of its subgadgets in our list due to our gadget extraction algorithm.
Thus when checking for behavior (e.g. for getPopGadgets), we need only check the first instruction within the gadget.


Sequence gadgets:
makeLoadConstIntoRegSeq(reg, noClobber) - Find an appropriate pop gadget for reg that does not clobber any of the registers in noClobber. Returns a function loadConstIntoReg(const, comment = '', isOffset = False) that outputs a ROP sequence that loads the designated const to the originally specified register, with appropriate padding below the constant on the stack. Comment is a comment to include on the constant being loaded, and isOffset is whether the constant refers to an address within the binary.

makeLoadSmallConstIntoRegSeq(reg, noClobber) - When a small value is needed, to avoid null bytes in the payload, instead of popping the constant, use a gadget to zero out the register, then increment (or add one) until the desired value. As before, is curried so it returns a function.

makeLoadConstsIntoRegsSeq(regs, noClobber, isSmall) - Since we often need to load multiple registers, this function is offered. Since later loads must avoid clobbering the previous loads, a given order may not necessarily yield a valid loads, when they may exist for another order. Thus this function tries all permutations of orders to find one that is valid, then provides a function that generates a ROP sequence that loads provided constants into the registers. Optional parameters to the return are list versions of those to the singular version. isSmall is a list that tells whether the corrisponding load should use the SmallConst maker instead.

makeQwordLoadSeq(isSmall) - returns a function f(qword, addr) that writes the specifies quadword to the specified address within the binary (thus we can target the .data section). The function iterates over all MovQwordGadgets to find one that has the appropriate register loads available as gadgets. isSmall is an optional parameter, which when set, uses the LoadSmallConst maker instead.


Wrapper Functions:
LoadConstIntoReg(reg, noClobber, const, comment, isOffset) - a wrapper for makeLoadConstIntoRegSeq and immediately calls the returned function.

loadConstsIntoRegs(regs, noClobber, consts, isSmall, comments, isOffsets) - the same, but for makeLoadConstsIntoRegsSeq. isSmall is an array of booleans that tells whether a certain constant to be written should be written using the zero-and-increment method.

WriteStuffIntoMemory(data, addr) - breaks up the divided data into quadwords and loads it to the specified address. If a quadword is broken up to be less than 256, the zero-and-increment method of loading is used.


With all of these helper functions, writing the actual payload generation is qutie simple.

1) Locate .data section of the binary.
This is done within the Elf class by checking shstrtab entries for .data.
See getDataSegment in the Elf class in elf.py.

2) Write b'/bin//sh\x00\x00\x00\x00\x00\x00\x00\x00' to the .data section.
This is "/bin//sh" followed by a null quadword. This is easily done with WriteStuffIntoMemory.
Note that if the program is told to not avoid null bytes, we will use b'/bin/sh\x00' instead.

3) Prepare the arguments for execve system call.
We need rax to be 59, rdi to be a pointer to the data section, and rsi and rdx to be 0.
This is easily done with loadConstsIntoRegs.

4) Make a syscall.
All that needs to be done is to add the address of a syscall gadget.


Step 1 is handled in execveROPChain, in execveChain.py.
The rest of the steps are handled in execve_bin_sh, in execveChain.py.
execveROPChain is called from ROPchainBinary, in main.py.

